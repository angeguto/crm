"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _autoprefix = _interopRequireDefault(require("./autoprefix"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function autoprefixes(styles) {
  return Object.keys(styles).reduce(function (obj, key) {
    return obj[key] = (0, _autoprefix.default)(styles[key]), obj;
  }, {});
}

var styles = autoprefixes({
  wrapper: {
    position: 'fixed',
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  dim: {
    position: 'fixed',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    zIndex: 0,
    background: 'rgba(0, 0, 0, 0.2)',
    opacity: 1
  },
  dimAppear: {
    opacity: 0
  },
  dimTransparent: {
    pointerEvents: 'none'
  },
  dimHidden: {
    opacity: 0
  },
  dock: {
    position: 'fixed',
    zIndex: 1,
    boxShadow: '0 0 4px rgba(0, 0, 0, 0.3)',
    background: 'white',
    left: 0,
    top: 0,
    width: '100%',
    height: '100%'
  },
  dockHidden: {
    opacity: 0
  },
  dockResizing: {
    transition: 'none'
  },
  dockContent: {
    width: '100%',
    height: '100%',
    overflow: 'auto'
  },
  resizer: {
    position: 'absolute',
    zIndex: 2,
    opacity: 0
  }
});

function getTransitions(duration) {
  return ['left', 'top', 'width', 'height'].map(function (p) {
    return "".concat(p, " ").concat(duration / 1000, "s ease-out");
  });
}

function getDockStyles(_ref, _ref2) {
  var fluid = _ref.fluid,
      dockStyle = _ref.dockStyle,
      dockHiddenStyle = _ref.dockHiddenStyle,
      duration = _ref.duration,
      position = _ref.position,
      isVisible = _ref.isVisible;
  var size = _ref2.size,
      isResizing = _ref2.isResizing,
      fullWidth = _ref2.fullWidth,
      fullHeight = _ref2.fullHeight;
  var posStyle;
  var absSize = fluid ? "".concat(size * 100, "%") : "".concat(size, "px");

  function getRestSize(fullSize) {
    return fluid ? "".concat(100 - size * 100, "%") : "".concat(fullSize - size, "px");
  }

  switch (position) {
    case 'left':
      posStyle = {
        width: absSize,
        left: isVisible ? 0 : '-' + absSize
      };
      break;

    case 'right':
      posStyle = {
        left: isVisible ? getRestSize(fullWidth) : fullWidth,
        width: absSize
      };
      break;

    case 'top':
      posStyle = {
        top: isVisible ? 0 : '-' + absSize,
        height: absSize
      };
      break;

    case 'bottom':
      posStyle = {
        top: isVisible ? getRestSize(fullHeight) : fullHeight,
        height: absSize
      };
      break;
  }

  var transitions = getTransitions(duration);
  return [styles.dock, (0, _autoprefix.default)({
    transition: [].concat((0, _toConsumableArray2.default)(transitions), [!isVisible && "opacity 0.01s linear ".concat(duration / 1000, "s")]).filter(function (t) {
      return t;
    }).join(',')
  }), dockStyle, (0, _autoprefix.default)(posStyle), isResizing && styles.dockResizing, !isVisible && styles.dockHidden, !isVisible && dockHiddenStyle];
}

function getDimStyles(_ref3, _ref4) {
  var dimMode = _ref3.dimMode,
      dimStyle = _ref3.dimStyle,
      duration = _ref3.duration,
      isVisible = _ref3.isVisible;
  var isTransitionStarted = _ref4.isTransitionStarted;
  return [styles.dim, (0, _autoprefix.default)({
    transition: "opacity ".concat(duration / 1000, "s ease-out")
  }), dimStyle, dimMode === 'transparent' && styles.dimTransparent, !isVisible && styles.dimHidden, isTransitionStarted && isVisible && styles.dimAppear, isTransitionStarted && !isVisible && styles.dimDisappear];
}

function getResizerStyles(position) {
  var resizerStyle;
  var size = 10;

  switch (position) {
    case 'left':
      resizerStyle = {
        right: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'right':
      resizerStyle = {
        left: -size / 2,
        width: size,
        top: 0,
        height: '100%',
        cursor: 'col-resize'
      };
      break;

    case 'top':
      resizerStyle = {
        bottom: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;

    case 'bottom':
      resizerStyle = {
        top: -size / 2,
        height: size,
        left: 0,
        width: '100%',
        cursor: 'row-resize'
      };
      break;
  }

  return [styles.resizer, (0, _autoprefix.default)(resizerStyle)];
}

function getFullSize(position, fullWidth, fullHeight) {
  return position === 'left' || position === 'right' ? fullWidth : fullHeight;
}

var Dock = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Dock, _Component);

  var _super = _createSuper(Dock);

  function Dock() {
    var _this;

    (0, _classCallCheck2.default)(this, Dock);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isControlled: typeof _this.props.size !== 'undefined',
      size: _this.props.size || _this.props.defaultSize,
      isDimHidden: !_this.props.isVisible,
      fullWidth: window.innerWidth,
      fullHeight: window.innerHeight,
      isTransitionStarted: false,
      isWindowResizing: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "transitionEnd", function () {
      _this.setState({
        isTransitionStarted: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "hideDim", function () {
      if (!_this.props.isVisible) {
        _this.setState({
          isDimHidden: true
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleDimClick", function () {
      if (_this.props.dimMode === 'opaque') {
        _this.props.onVisibleChange && _this.props.onVisibleChange(false);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleResize", function () {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(_this.updateWindowSize.bind((0, _assertThisInitialized2.default)(_this), true));
      } else {
        _this.updateWindowSize(true);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateWindowSize", function (windowResize) {
      var sizeState = {
        fullWidth: window.innerWidth,
        fullHeight: window.innerHeight
      };

      if (windowResize) {
        _this.setState(_objectSpread(_objectSpread({}, sizeState), {}, {
          isResizing: true,
          isWindowResizing: windowResize
        }));

        _this.debouncedUpdateWindowSizeEnd();
      } else {
        _this.setState(sizeState);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateWindowSizeEnd", function () {
      _this.setState({
        isResizing: false,
        isWindowResizing: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "debouncedUpdateWindowSizeEnd", (0, _lodash.default)(_this.updateWindowSizeEnd, 30));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleWrapperLeave", function () {
      _this.setState({
        isResizing: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseDown", function () {
      _this.setState({
        isResizing: true
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseUp", function () {
      _this.setState({
        isResizing: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleMouseMove", function (e) {
      if (!_this.state.isResizing || _this.state.isWindowResizing) return;
      if (!e.touches) e.preventDefault();
      var _this$props = _this.props,
          position = _this$props.position,
          fluid = _this$props.fluid;
      var _this$state = _this.state,
          fullWidth = _this$state.fullWidth,
          fullHeight = _this$state.fullHeight,
          isControlled = _this$state.isControlled;
      var _ref5 = e,
          x = _ref5.clientX,
          y = _ref5.clientY;

      if (e.touches) {
        x = e.touches[0].clientX;
        y = e.touches[0].clientY;
      }

      var size;

      switch (position) {
        case 'left':
          size = fluid ? x / fullWidth : x;
          break;

        case 'right':
          size = fluid ? (fullWidth - x) / fullWidth : fullWidth - x;
          break;

        case 'top':
          size = fluid ? y / fullHeight : y;
          break;

        case 'bottom':
          size = fluid ? (fullHeight - y) / fullHeight : fullHeight - y;
          break;
      }

      _this.props.onSizeChange && _this.props.onSizeChange(size);

      if (!isControlled) {
        _this.setState({
          size: size
        });
      }
    });
    return _this;
  }

  (0, _createClass2.default)(Dock, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('touchend', this.handleMouseUp);
      window.addEventListener('mouseup', this.handleMouseUp);
      window.addEventListener('touchmove', this.handleMouseMove);
      window.addEventListener('mousemove', this.handleMouseMove);
      window.addEventListener('resize', this.handleResize);
      this.updateWindowSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('touchend', this.handleMouseUp);
      window.removeEventListener('mouseup', this.handleMouseUp);
      window.removeEventListener('touchmove', this.handleMouseMove);
      window.removeEventListener('mousemove', this.handleMouseMove);
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var isControlled = typeof nextProps.size !== 'undefined';
      this.setState({
        isControlled: isControlled
      });

      if (isControlled && nextProps.size && this.props.size !== nextProps.size) {
        this.setState({
          size: nextProps.size
        });
      } else if (this.props.fluid !== nextProps.fluid) {
        this.updateSize(nextProps);
      }

      if (this.props.isVisible !== nextProps.isVisible) {
        this.setState({
          isTransitionStarted: true
        });
      }
    }
  }, {
    key: "updateSize",
    value: function updateSize(props) {
      var _this$state2 = this.state,
          fullWidth = _this$state2.fullWidth,
          fullHeight = _this$state2.fullHeight;
      this.setState({
        size: props.fluid ? this.state.size / getFullSize(props.position, fullWidth, fullHeight) : getFullSize(props.position, fullWidth, fullHeight) * this.state.size
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (this.props.isVisible !== prevProps.isVisible) {
        if (!this.props.isVisible) {
          window.setTimeout(function () {
            return _this2.hideDim();
          }, this.props.duration);
        } else {
          this.setState({
            isDimHidden: false
          });
        }

        window.setTimeout(function () {
          return _this2.setState({
            isTransitionStarted: false
          });
        }, 0);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          zIndex = _this$props2.zIndex,
          dimMode = _this$props2.dimMode,
          position = _this$props2.position,
          isVisible = _this$props2.isVisible;
      var _this$state3 = this.state,
          isResizing = _this$state3.isResizing,
          size = _this$state3.size,
          isDimHidden = _this$state3.isDimHidden;
      var dimStyles = Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(getDimStyles(this.props, this.state))));
      var dockStyles = Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(getDockStyles(this.props, this.state))));
      var resizerStyles = Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(getResizerStyles(position))));
      return /*#__PURE__*/_react.default.createElement("div", {
        style: Object.assign({}, styles.wrapper, {
          zIndex: zIndex
        })
      }, dimMode !== 'none' && !isDimHidden && /*#__PURE__*/_react.default.createElement("div", {
        style: dimStyles,
        onClick: this.handleDimClick
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: dockStyles
      }, /*#__PURE__*/_react.default.createElement("div", {
        style: resizerStyles,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleMouseDown
      }), /*#__PURE__*/_react.default.createElement("div", {
        style: styles.dockContent
      }, typeof children === 'function' ? children({
        position: position,
        isResizing: isResizing,
        size: size,
        isVisible: isVisible
      }) : children)));
    }
  }]);
  return Dock;
}(_react.Component);

exports.default = Dock;
(0, _defineProperty2.default)(Dock, "propTypes", {
  position: _propTypes.default.oneOf(['left', 'right', 'top', 'bottom']),
  zIndex: _propTypes.default.number,
  fluid: _propTypes.default.bool,
  size: _propTypes.default.number,
  defaultSize: _propTypes.default.number,
  dimMode: _propTypes.default.oneOf(['none', 'transparent', 'opaque']),
  isVisible: _propTypes.default.bool,
  onVisibleChange: _propTypes.default.func,
  onSizeChange: _propTypes.default.func,
  dimStyle: _propTypes.default.object,
  dockStyle: _propTypes.default.object,
  duration: _propTypes.default.number
});
(0, _defineProperty2.default)(Dock, "defaultProps", {
  position: 'left',
  zIndex: 99999999,
  fluid: true,
  defaultSize: 0.3,
  dimMode: 'opaque',
  duration: 200
});